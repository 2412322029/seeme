import{B as f,g as m,s as y,d as w,i as k,c as x,a as O,e as L,H as h,b as S}from"./page-rSCQLf4r.js";import"./index-DAkhcvNy.js";import"./index-BEF1Fh9r.js";class T extends f{constructor({callbackSelector:r,cause:a,data:n,extraData:d,sender:u,urls:t}){var o;super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],(o=a.metaMessages)!=null&&o.length?"":[],"Offchain Gateway Call:",t&&["  Gateway URL(s):",...t.map(i=>`    ${m(i)}`)],`  Sender: ${u}`,`  Data: ${n}`,`  Callback selector: ${r}`,`  Extra data: ${d}`].flat(),name:"OffchainLookupError"})}}class $ extends f{constructor({result:r,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${m(a)}`,`Response: ${y(r)}`],name:"OffchainLookupResponseMalformedError"})}}class M extends f{constructor({sender:r,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${r}`],name:"OffchainLookupSenderMismatchError"})}}const j="0x556f1830",R={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function q(c,{blockNumber:r,blockTag:a,data:n,to:d}){const{args:u}=w({data:n,abi:[R]}),[t,o,i,l,s]=u,{ccipRead:e}=c,b=e&&typeof(e==null?void 0:e.request)=="function"?e.request:E;try{if(!k(d,t))throw new M({sender:t,to:d});const p=await b({data:i,sender:t,urls:o}),{data:g}=await x(c,{blockNumber:r,blockTag:a,data:O([l,L([{type:"bytes"},{type:"bytes"}],[p,s])]),to:d});return g}catch(p){throw new T({callbackSelector:l,cause:p,data:n,extraData:s,sender:t,urls:o})}}async function E({data:c,sender:r,urls:a}){var d;let n=new Error("An unknown error occurred.");for(let u=0;u<a.length;u++){const t=a[u],o=t.includes("{data}")?"GET":"POST",i=o==="POST"?{data:c,sender:r}:void 0,l=o==="POST"?{"Content-Type":"application/json"}:{};try{const s=await fetch(t.replace("{sender}",r).replace("{data}",c),{body:JSON.stringify(i),headers:l,method:o});let e;if(e=(d=s.headers.get("Content-Type"))!=null&&d.startsWith("application/json")?(await s.json()).data:await s.text(),!s.ok){n=new h({body:i,details:e!=null&&e.error?y(e.error):s.statusText,headers:s.headers,status:s.status,url:t});continue}if(!S(e)){n=new $({result:e,url:t});continue}return e}catch(s){n=new h({body:i,details:s.message,url:t})}}throw n}export{E as ccipRequest,q as offchainLookup,R as offchainLookupAbiItem,j as offchainLookupSignature};
